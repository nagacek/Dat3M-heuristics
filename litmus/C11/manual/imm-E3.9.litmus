C imm-E3.9

(*
 * Bridging the Gap between Programming Languages and Hardware Weak Memory Models
 *)

{}

P0 (atomic_int* y, atomic_int* z) {
    int r0 = atomic_load_explicit(y, memory_order_relaxed);
    atomic_thread_fence(memory_order_seq_cst);
    int r1 = atomic_load_explicit(z, memory_order_relaxed);
}

P1 (atomic_int* x, atomic_int* z) {
    atomic_store_explicit(z, 1, memory_order_relaxed);
    atomic_thread_fence(memory_order_seq_cst);
    atomic_store_explicit(x, 1, memory_order_relaxed);
}

P2 (atomic_int* x, atomic_int* y) {
    int r0 = atomic_load_explicit(x, memory_order_relaxed);
    if (r0 != 0) {
        atomic_store_explicit(y, 1, memory_order_relaxed);
    }
}

exists (0:r0=1 /\ 0:r1=0 /\ 2:r0=10)
