C W+RR+WW+WR+po+rfi-po+rfi-po+onces+locked
Cycle=Rfi PodRW Wse Rfi PodRR Fre Rfe PodRR Fre
Relax=
Safe=[Rfi,PodRW] [Rfi,PodRR] Rfe Fre Wse PodRR
Prefetch=1:x=F,1:y=T,2:y=F,2:z=W,3:z=F,3:x=T
Com=Rf Fr Ws Fr
Orig=Rfe PodRR Fre Rfi PodRW Wse Rfi PodRR Fre

{}


P0(volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_x);
  WRITE_ONCE(*x,1);
  spin_unlock(lock_x);
}

P1(volatile int* y,spinlock_t* lock_y,volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_x);
  int r0 = READ_ONCE(*x);
  spin_unlock(lock_x);
  spin_lock(lock_y);
  int r1 = READ_ONCE(*y);
  spin_unlock(lock_y);
}

P2(volatile int* z,spinlock_t* lock_z,volatile int* y,spinlock_t* lock_y) {
  spin_lock(lock_y);
  WRITE_ONCE(*y,1);
  int r0 = READ_ONCE(*y);
  spin_unlock(lock_y);
  spin_lock(lock_z);
  WRITE_ONCE(*z,1);
  spin_unlock(lock_z);
}

P3(volatile int* z,spinlock_t* lock_z,volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_z);
  WRITE_ONCE(*z,2);
  int r0 = READ_ONCE(*z);
  spin_unlock(lock_z);
  spin_lock(lock_x);
  int r1 = READ_ONCE(*x);
  spin_unlock(lock_x);
}

exists (z=2 /\ 1:r0=1 /\ 1:r1=0 /\ 2:r0=1 /\ 3:r0=2 /\ 3:r1=0)
