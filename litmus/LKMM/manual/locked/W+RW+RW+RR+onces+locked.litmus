C W+RW+RW+RR+onces+locked
Cycle=Rfe PodRW Rfe PodRW Rfe PodRR Fre
Relax=
Safe=Rfe Fre PodRW PodRR
Prefetch=1:x=F,1:y=W,2:y=F,2:z=W,3:z=F,3:x=T
Com=Rf Rf Rf Fr
Orig=Rfe PodRW Rfe PodRW Rfe PodRR Fre

{}


P0(volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_x);
  WRITE_ONCE(*x,1);
  spin_unlock(lock_x);
}

P1(volatile int* y,spinlock_t* lock_y,volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_x);
  int r0 = READ_ONCE(*x);
  spin_unlock(lock_x);
  spin_lock(lock_y);
  WRITE_ONCE(*y,1);
  spin_unlock(lock_y);
}

P2(volatile int* z,spinlock_t* lock_z,volatile int* y,spinlock_t* lock_y) {
  spin_lock(lock_y);
  int r0 = READ_ONCE(*y);
  spin_unlock(lock_y);
  spin_lock(lock_z);
  WRITE_ONCE(*z,1);
  spin_unlock(lock_z);
}

P3(volatile int* z,spinlock_t* lock_z,volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_z);
  int r0 = READ_ONCE(*z);
  spin_unlock(lock_z);
  spin_lock(lock_x);
  int r1 = READ_ONCE(*x);
  spin_unlock(lock_x);
}

exists (1:r0=1 /\ 2:r0=1 /\ 3:r0=1 /\ 3:r1=0)
