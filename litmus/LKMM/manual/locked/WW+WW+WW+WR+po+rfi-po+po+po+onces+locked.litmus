C WW+WW+WW+WR+po+rfi-po+po+po+onces+locked
Cycle=Rfi PodRW Wse PodWW Wse PodWR Fre PodWW Wse
Relax=
Safe=[Rfi,PodRW] Fre Wse PodWW PodWR
Prefetch=0:x=F,0:y=W,1:y=F,1:z=W,2:z=F,2:a=W,3:a=F,3:x=T
Com=Ws Ws Ws Fr
Orig=PodWW Wse Rfi PodRW Wse PodWW Wse PodWR Fre

{}


P0(volatile int* y,spinlock_t* lock_y,volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_x);
  WRITE_ONCE(*x,1);
  spin_unlock(lock_x);
  spin_lock(lock_y);
  WRITE_ONCE(*y,1);
  spin_unlock(lock_y);
}

P1(volatile int* z,spinlock_t* lock_z,volatile int* y,spinlock_t* lock_y) {
  spin_lock(lock_y);
  WRITE_ONCE(*y,2);
  int r0 = READ_ONCE(*y);
  spin_unlock(lock_y);
  spin_lock(lock_z);
  WRITE_ONCE(*z,1);
  spin_unlock(lock_z);
}

P2(volatile int* z,spinlock_t* lock_z,volatile int* a,spinlock_t* lock_a) {
  spin_lock(lock_z);
  WRITE_ONCE(*z,2);
  spin_unlock(lock_z);
  spin_lock(lock_a);
  WRITE_ONCE(*a,1);
  spin_unlock(lock_a);
}

P3(volatile int* x,spinlock_t* lock_x,volatile int* a,spinlock_t* lock_a) {
  spin_lock(lock_a);
  WRITE_ONCE(*a,2);
  spin_unlock(lock_a);
  spin_lock(lock_x);
  int r0 = READ_ONCE(*x);
  spin_unlock(lock_x);
}

exists (a=2 /\ y=2 /\ z=2 /\ 1:r0=2 /\ 3:r0=0)
