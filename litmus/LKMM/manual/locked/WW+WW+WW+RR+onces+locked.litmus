C WW+WW+WW+RR+onces+locked
Cycle=Rfe PodRR Fre PodWW Wse PodWW Wse PodWW
Relax=
Safe=Rfe Fre Wse PodWW PodRR
Prefetch=0:x=F,0:y=W,1:y=F,1:z=W,2:z=F,2:a=W,3:a=F,3:x=T
Com=Ws Ws Rf Fr
Orig=PodWW Wse PodWW Wse PodWW Rfe PodRR Fre

{}


P0(volatile int* y,spinlock_t* lock_y,volatile int* x,spinlock_t* lock_x) {
  spin_lock(lock_x);
  WRITE_ONCE(*x,1);
  spin_unlock(lock_x);
  spin_lock(lock_y);
  WRITE_ONCE(*y,1);
  spin_unlock(lock_y);
}

P1(volatile int* z,spinlock_t* lock_z,volatile int* y,spinlock_t* lock_y) {
  spin_lock(lock_y);
  WRITE_ONCE(*y,2);
  spin_unlock(lock_y);
  spin_lock(lock_z);
  WRITE_ONCE(*z,1);
  spin_unlock(lock_z);
}

P2(volatile int* z,spinlock_t* lock_z,volatile int* a,spinlock_t* lock_a) {
  spin_lock(lock_z);
  WRITE_ONCE(*z,2);
  spin_unlock(lock_z);
  spin_lock(lock_a);
  WRITE_ONCE(*a,1);
  spin_unlock(lock_a);
}

P3(volatile int* x,spinlock_t* lock_x,volatile int* a,spinlock_t* lock_a) {
  spin_lock(lock_a);
  int r0 = READ_ONCE(*a);
  spin_unlock(lock_a);
  spin_lock(lock_x);
  int r1 = READ_ONCE(*x);
  spin_unlock(lock_x);
}

exists (y=2 /\ z=2 /\ 3:r0=1 /\ 3:r1=0)
