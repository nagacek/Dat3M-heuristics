C C-less-super-dist-2+2w+rel+acq-assign+deref-addr-o+o-wmb-o+o-wmb-o
{
x = 0;
y = 0;
z = 0;
}

P0(int *x)
{
	smp_store_release(x, 1);
}

P1(int *y, int *x)
{
	int r1 = smp_load_acquire(x);
	rcu_assign_pointer(*(char **)y, (char *)1);
}

P2(int *y, int *z)
{
	int r2; int r9; int *r3;
	r2 = (int)rcu_dereference(*(char **)y);
	r9 = (r2 & 8);
	r3 = (z + r9);
	WRITE_ONCE(*r3, 1);
}

P3(int *x, int *z)
{
	WRITE_ONCE(*z, 2);
	smp_wmb();
	WRITE_ONCE(*x, 2);
}

exists (1:r1=1 /\ 2:r2=1 /\ z=2 /\ x=1)
(*More precisely, Paul says, about the same test but with a fourth processor
creating a 2+2w shape at the end:
There is definitely ordering from P0's write through P2's write.  The
transition to the pairs of writes is an open question for me.  The presence of
any uncertainty would cause me to want to allow the cycle, that is, forbid
snapping multiple write pairs onto the end of this sequence.
*)
