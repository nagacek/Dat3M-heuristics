C C-3.LB+deref-addr-assign+deref-addr-assign
{
x = 0;
y = 0;
z = 0;
}

P0(int *x, int *y)
{
	int r1; int r9; int *r2;
	r1 = (int)rcu_dereference(*(char **)x);
	r9 = (r1 & 4);
	r2 = (y + r9);
	rcu_assign_pointer(*(char **)r2, (char *)1);
}

P1(int *y, int *z)
{
	int r3; int r9; int *r4;
	r3 = (int)rcu_dereference(*(char **)y);
	r9 = (r3 & 4);
	r4 = (z + r9);
	rcu_assign_pointer(*(char **)r4, (char *)1);
}

P2(int *x, int *z)
{
	int r5; int r9; int *r6;
	r5 = (int)rcu_dereference(*(char **)z);
	r9 = (r5 & 4);
	r6 = (x + r9);
	rcu_assign_pointer(*(char **)r6, (char *)1);
}

exists(0:r1=1 /\ 1:r3=1 /\ 2:r5=1)
(*More precisely, Paul says:
        All w[assign] paired with same-variable r[deref] and proper
        dependencies.  P0's r[deref] could be r[once] and P2's w[assign]
        could be w[once] and still forbid this cycle.
        But herd seems to disagree.
*)
