C auto/C-RW-G+RW-G+RW-R+RW-G+RW-G+RW-Rr+RW-RC+RW-R
(*
 * Result: Never
 * 
 * Process 0 starts (t=100000).
 * 
 * P0 advances one grace period (t=200000).
 * 
 * P1 advances one grace period (t=300001).
 * 
 * P2 goes back a bit less than one grace period (t=201002).
 * 
 * P3 advances one grace period (t=301003).
 * 
 * P4 advances one grace period (t=401004).
 * 
 * P5 advances slightly (t=401006).
 * 
 * P6 advances slightly (t=401008).
 * 
 * P7 goes back a bit less than one grace period (t=302009).
 * 
 * Process 0 start at t=100000, process 8 end at t=302009: Cycle forbidden.
 *)
{
}

P0(intptr_t *x0, intptr_t *x1)
{
	intptr_t r1 = READ_ONCE(*x0);
	synchronize_rcu();
	WRITE_ONCE(*x1, 1);
}


P1(intptr_t *x1, intptr_t *x2)
{
	intptr_t r1 = READ_ONCE(*x1);
	synchronize_rcu();
	WRITE_ONCE(*x2, 1);
}


P2(intptr_t *x2, intptr_t *x3)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x2);
	WRITE_ONCE(*x3, 1);
	rcu_read_unlock();
}


P3(intptr_t *x3, intptr_t *x4)
{
	intptr_t r1 = READ_ONCE(*x3);
	synchronize_rcu();
	WRITE_ONCE(*x4, 1);
}


P4(intptr_t *x4, intptr_t *x5)
{
	intptr_t r1 = READ_ONCE(*x4);
	synchronize_rcu();
	WRITE_ONCE(*x5, 1);
}


P5(intptr_t *x5, intptr_t *x6)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x5);
	smp_store_release(x6, 1);
	rcu_read_unlock();
}


P6(intptr_t *x6, intptr_t *x7)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x6);
	intptr_t r4 = (r1 != r4);
	if (r4) {
		WRITE_ONCE(*x7, 1);
	}
	rcu_read_unlock();
}


P7(intptr_t *x7, intptr_t *x0)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x7);
	WRITE_ONCE(*x0, 1);
	rcu_read_unlock();
}

exists
(0:r1=1 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1 /\ 5:r1=1 /\ 6:r1=1 /\ 7:r1=1)
