C auto/C-RW-G+RW-G+RW-Rs+RW-RD+RW-R
(*
 * Result: Never
 * 
 * Process 0 starts (t=100000).
 * 
 * P0 advances one grace period (t=200000).
 * 
 * P1 advances one grace period (t=300001).
 * 
 * P2 advances slightly (t=300003).
 * 
 * P3 advances slightly (t=300005).
 * 
 * P4 goes back a bit less than one grace period (t=201006).
 * 
 * Process 0 start at t=100000, process 5 end at t=201006: Cycle forbidden.
 *)
{
	x3=y4;
}

P0(intptr_t *x0, intptr_t *x1)
{
	intptr_t r1 = READ_ONCE(*x0);
	synchronize_rcu();
	WRITE_ONCE(*x1, 1);
}


P1(intptr_t *x1, intptr_t *x2)
{
	intptr_t r1 = READ_ONCE(*x1);
	synchronize_rcu();
	WRITE_ONCE(*x2, 1);
}


P2(intptr_t *x2, intptr_t *x3, intptr_t *x4)
{
	intptr_t r3=x4;

	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x2);
	rcu_assign_pointer(*(intptr_t **)x3, (intptr_t *)r3);
	rcu_read_unlock();
}


P3(intptr_t *x3, intptr_t *y4)
{
	intptr_t r4=y4;

	rcu_read_lock();
	intptr_t r1 = (intptr_t)rcu_dereference(*(intptr_t **)x3);
	WRITE_ONCE(*(intptr_t *)r1, 1);
	rcu_read_unlock();
}


P4(intptr_t *x0, intptr_t *x4)
{
	rcu_read_lock();
	intptr_t r1 = READ_ONCE(*x4);
	WRITE_ONCE(*x0, 1);
	rcu_read_unlock();
}

exists
(0:r1=1 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=x4 /\ 4:r1=1)
