C auto/C-RW-G+RW-RI+RW-G+RW-G+RW-G+RW-RI+RW-RI
(*
 * Result: Never
 * 
 * Process 0 starts (t=100000).
 * 
 * P0 advances one grace period (t=200000).
 * 
 * P1 goes back a bit less than one grace period (t=101001).
 * 
 * P2 advances one grace period (t=201002).
 * 
 * P3 advances one grace period (t=301003).
 * 
 * P4 advances one grace period (t=401004).
 * 
 * P5 goes back a bit less than one grace period (t=302005).
 * 
 * P6 goes back a bit less than one grace period (t=203006).
 * 
 * Process 0 start at t=100000, process 7 end at t=203006: Cycle forbidden.
 *)
{
}

P0(intptr_t *x0, intptr_t *x1)
{
	intptr_t r1 = READ_ONCE(*x0);
	synchronize_rcu();
	WRITE_ONCE(*x1, 1);
}


P1(intptr_t *x1, intptr_t *x2)
{
	rcu_read_lock();
	WRITE_ONCE(*x2, 1);
	intptr_t r1 = READ_ONCE(*x1);
	rcu_read_unlock();
}


P2(intptr_t *x2, intptr_t *x3)
{
	intptr_t r1 = READ_ONCE(*x2);
	synchronize_rcu();
	WRITE_ONCE(*x3, 1);
}


P3(intptr_t *x3, intptr_t *x4)
{
	intptr_t r1 = READ_ONCE(*x3);
	synchronize_rcu();
	WRITE_ONCE(*x4, 1);
}


P4(intptr_t *x4, intptr_t *x5)
{
	intptr_t r1 = READ_ONCE(*x4);
	synchronize_rcu();
	WRITE_ONCE(*x5, 1);
}


P5(intptr_t *x5, intptr_t *x6)
{
	rcu_read_lock();
	WRITE_ONCE(*x6, 1);
	intptr_t r1 = READ_ONCE(*x5);
	rcu_read_unlock();
}


P6(intptr_t *x6, intptr_t *x0)
{
	rcu_read_lock();
	WRITE_ONCE(*x0, 1);
	intptr_t r1 = READ_ONCE(*x6);
	rcu_read_unlock();
}

exists
(0:r1=1 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1 /\ 5:r1=1 /\ 6:r1=1)
