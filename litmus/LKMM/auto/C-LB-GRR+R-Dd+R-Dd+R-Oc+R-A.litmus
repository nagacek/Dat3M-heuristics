C auto/C-LB-GRR+R-Dd+R-Dd+R-Oc+R-A
(*
 * Result: Maybe
 * P0 GRR: Never->Maybe: Should rel-acq provide any global transitivity?
 *)
{
	x1=y1;
	x2=y2;
}

P0(intptr_t *u0, intptr_t *x1, intptr_t *x2)
{
	intptr_t r3=x2;

	intptr_t r1 = READ_ONCE(*u0);
	smp_store_release(x1, r3);
}


P1(intptr_t *x1, intptr_t *x3)
{
	intptr_t r3=x3;

	intptr_t r1 = (intptr_t)rcu_dereference(*(intptr_t **)x1);
	smp_store_release((intptr_t *)r1, r3);
}


P2(intptr_t *x2)
{
	intptr_t r1 = (intptr_t)rcu_dereference(*(intptr_t **)x2);
	smp_store_release((intptr_t *)r1, 1);
}


P3(intptr_t *x3, intptr_t *x4)
{
	intptr_t r4=1;

	intptr_t r1 = READ_ONCE(*x3);
	r4 = (r1 == r4);
	if (r4) {
		smp_store_release(x4, 1);
	}
}


P4(intptr_t *v0, intptr_t *x4)
{
	intptr_t r1 = smp_load_acquire(x4);
	intptr_t r2 = READ_ONCE(*v0);
}


P5(intptr_t *u0, intptr_t *v0)
{
	WRITE_ONCE(*v0, 1);
	smp_mb();
	WRITE_ONCE(*u0, 1);
}

exists
(4:r2=0 /\ 0:r1=1 /\ 1:r1=x2 /\ 2:r1=x3 /\ 3:r1=1 /\ 4:r1=1)
